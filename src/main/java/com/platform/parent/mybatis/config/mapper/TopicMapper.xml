<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platform.parent.mybatis.dao.TopicMapper">
    <!--private long userId;
    private long ownerId;
    private String name;
    private boolean pri, essence, top;
    private long campId;
    private String groupId;
    private Timestamp created, updated;-->
    <resultMap id="base" type="com.platform.parent.mybatis.bean.Topic">
        <id column="topic_id" property="id"/>
        <result column="owner_id" property="ownerId"/>
        <result column="name" property="name"/>
        <result column="pri" property="pri"/>
        <result column="essence" property="essence"/>
        <result column="top" property="top"/>
        <result column="camp_id" property="campId"/>
        <result column="group_id" property="groupId"/>
        <result column="created" property="created"/>
        <result column="updated" property="updated"/>
        <result column="temp" property="temp"/>
        <result column="read" property="read"/>
        <result column="reply" property="reply"/>
        <result column="nickname" property="owner" />
    </resultMap>


    <!--int add(Topic topic);-->
    <insert id="add" parameterType="com.platform.parent.mybatis.bean.Topic" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO topic (owner_id, name, pri, essence, top, camp_id, group_id, created, updated, temp)
        VALUES (#{ownerId}, #{name},#{pri},#{essence},#{top},#{campId},#{groupId},#{created},#{updated}, #{temp})
    </insert>
    <!--int update(Topic topic);-->
    <update id="update" parameterType="com.platform.parent.mybatis.bean.Topic">
        UPDATE topic SET owner_id = #{ownerId}, name = #{name}, pri = #{pri}, essence = #{essence},
        top = #{top}, camp_id = #{campId}, group_id = #{groupId}, created = #{created}, updated = #{updated},
            temp = #{temp}
        WHERE topic_id = #{id}
    </update>
    <update id="addRead" parameterType="long">
        UPDATE topic set `read` = `read`+1 WHERE topic_id = #{topicId}
    </update>
    <!--int deleteByIds(String[] ids);-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        DELETE FROM topic WHERE topic_id IN
        <foreach collection="array" item="idItem" open="(" separator="," close=")">
            #{idItem}
        </foreach>
    </delete>
    <!--Topic findTopicById(long topicId);-->
    <select id="findTopicById" parameterType="long" resultMap="base">
        SELECT t.*, u.nickname FROM topic t
        LEFT JOIN `user` u ON u.id = t.owner_id
        WHERE topic_id = #{id}
    </select>
    <!--Topic findTopicByGroupId(String groupId);-->
    <select id="findTopicByGroupId" parameterType="java.lang.String" resultMap="base">
        SELECT t.*, u.nickname FROM topic t
        LEFT JOIN `user` u ON u.id = t.owner_id
        WHERE topic.group_id = #{groupId}
    </select>
    <!--List<Topic> findTopicAccessible(long userId);-->
    <select id="findTopicAccessible" parameterType="long" resultMap="base">
        SELECT t.*, ifnull(mm.`reply`,0), u.nickname FROM topic t
        LEFT JOIN topic_collection tc ON t.topic_id = tc.topic_id
        LEFT JOIN topic_involve ti ON t.topic_id = ti.topic_id
        LEFT JOIN  (SELECT count(1) `reply`, `to` FROM message) mm ON mm.`to` = t.group_id
        LEFT JOIN `user` u ON u.id = t.owner_id
        WHERE t.owner_id = #{userId} OR (t.pri = FALSE AND (ti.user_id = #{userId} OR tc.user_id = #{userId}))
        GROUP BY t.topic_id
        ORDER BY updated DESC
    </select>

    <select id="findTopicByCampId" parameterType="long" resultMap="base">
        SELECT t.* , IFNULL(mm.`reply`, 0), u.nickname FROM topic t
        LEFT JOIN  (SELECT count(1) `reply`, `to` FROM message) mm ON mm.`to` = t.group_id
        LEFT JOIN `user` u ON u.id = t.owner_id
        WHERE camp_id = #{campId} AND t.pri = FALSE
    </select>

    <select id="findTopicEssence" parameterType="long" resultMap="base">
        SELECT t.*, ifnull(mm.`reply`, 0), u.nickname FROM topic t
        LEFT JOIN (SELECT count(1) `reply`, `to` FROM message) mm ON mm.`to` = t.group_id
        LEFT JOIN `user` u ON u.id = t.owner_id
        WHERE t.camp_id = #{campId} AND t.essence = TRUE
    </select>

    <delete id="clearTopicsOverSevenDays" >
        DELETE FROM topic WHERE  DATE_SUB(CURDATE(), INTERVAL 7 DAY) > date(created) AND !(essence  AND pri AND top )
    </delete>
    
    <select id="findTopicsOverSevenDays" resultMap="base">
        SELECT * FROM topic  WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) > date(created) AND !(essence  AND pri  AND top )
    </select>
</mapper>